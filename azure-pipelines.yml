trigger:
- main  # Trigger on changes to the main branch (or change it to your branch)

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'sample_app'   # Your image name
  dockerRegistry: 'docker.io'   # Docker registry (Docker Hub in this case)
  dockerUser: 'yash26111998'   # Docker Hub username
  dockerPassword: '#Mynameisyash26#'   # Docker Hub password
  sshEndpoint: 'ec2-ssh-connection'  # SSH service connection to EC2

stages:
- stage: Build
  displayName: 'Build Docker Image'
  jobs:
  - job: Build
    displayName: 'Build Docker image'
    steps:
    - task: Checkout@1
      displayName: 'Checkout GitHub repository'

    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: 'build'
        repository: '$(imageName)'
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: 'latest'

    - task: Docker@2
      displayName: 'Push Docker image to Docker Hub'
      inputs:
        command: 'push'
        repository: '$(dockerUser)/$(imageName)'
        tags: 'latest'
        containerRegistry: '$(dockerRegistry)'  # Use Docker Hub or your private registry

- stage: Deploy
  displayName: 'Deploy to EC2'
  jobs:
  - job: Deploy
    displayName: 'Deploy Docker container to EC2'
    steps:
    - task: SSH@0
      displayName: 'SSH into EC2 instance and deploy container'
      inputs:
        sshEndpoint: '$(sshEndpoint)'  # The SSH endpoint to your EC2 instance
        runOptions: 'inline'
        inline: |
          # Pull the new image from Docker Hub
          docker pull $(dockerUser)/$(imageName):latest
          
          # Stop and remove the existing container (if it exists)
          docker stop sample_app_container || true
          docker rm sample_app_container || true

          # Run the new container
          docker run -d --name sample_app_container -p 80:5000 $(dockerUser)/$(imageName):latest
